@using System.Collections.Generic
@using System.Linq
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@page "/todo"

<h3>Number of Items todo: @todos.Count(todo => !todo.IsDone) </h3>
<input placeholder="Somthing todo" @bind="newTodo" />

<label>To do Description: </label>
<input placeholder="Description" @bind="newTodoDescription" />

<label>Due Date: </label>
<input type="date" @bind="newTodoDueDate" />

<button @onclick="AddTodo">Add item</button>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div>
        <h2>@errorMessage</h2>
    </div>
}

    <ul>
        @foreach (var item in todos.Where(todo => filter == "all" || (filter == "done" && todo.IsDone) || (filter ==
        "notdone" && !todo.IsDone)))
        {
            <li>
                <input type="checkbox" @onclick="(e) => UpdateIsDone(item)" @bind="item.IsDone"> @item.Title
                <button @onclick="(e) => AddSubItem(item)">Add Sub Items</button>
                <button @onclick="(e) => DeleteTodo(item)">Delete todo</button>


                @if (item.SubItems != null)
                {
                    <span># of SubItem: @item.SubItems.Count(e => !e.SubIsDone)</span>
                    <ul>
                        @foreach (var subitem in item.SubItems)
                        {
                            <li>
                                <input type="checkbox" @bind="subitem.SubIsDone"> @subitem.SubTitle
                                <button @onclick="(e) => DeleteSubItem(item, subitem)">Delete Sub Item</button>
                            </li>
                        }
                    </ul>
                }
            </li>
        }
    </ul>

        <label> Filter</label>
        <select @bind="filter">
            <option value="all">All</option>
            <option value="done">Done</option>
            <option value="notdone">Not Done</option>
        </select>
        <ul>
            @foreach (var item in todos.Where(todo => filter == "all" || (filter == "done" && todo.IsDone) || (filter ==
            "notdone" && !todo.IsDone)))
            {
                <li>
                    <input type="checkbox" @bind="item.IsDone"> @item.Title
                </li>
            }
        </ul>

@code
    {
        private List<TodoItem> todos = new();
        private string newTodo;
        private string filter = "all";
        private string newTodoDescription;
        private DateTime newTodoDueDate;
        private string errorMessage;

        private void AddTodo()
        {
                try 
                {  
                    errorMessage = null;             
                    if (string.IsNullOrWhiteSpace(newTodo))
                    {
                        throw new InvalidOperationException("Please enter a todo");
                    }                
                    
                    todos.Add(new TodoItem { Title = newTodo, newTodoDescription = newTodoDescription, newTodoDueDate = newTodoDueDate });
                    newTodo = "";
                    newTodoDescription = "";
                    newTodoDueDate = DateTime.Now;
                }
                catch (Exception ex)
                {
                    errorMessage = ex.Message;
                }
        }

        private void AddSubItem(TodoItem currentItem)
            {
                try{

                    errorMessage = null;             
                    if (string.IsNullOrWhiteSpace(newTodo))
                    {
                        throw new InvalidOperationException("Please enter a todo");
                    }

                
                    if (currentItem.SubItems == null) currentItem.SubItems = new List<TodoSubItems>();

                    currentItem.SubItems.Add(new TodoSubItems { SubTitle = newTodo });
                    newTodo = "";
                
                    }

                catch (Exception ex)
                {
                    errorMessage = ex.Message;
                }
            }

        private void UpdateIsDone(TodoItem currentItem)
            {
                if (currentItem.SubItems != null)
                {
                    foreach (var subitem in currentItem.SubItems)
                    {
                        subitem.SubIsDone = true;
                    }

                }
            }

        private void DeleteTodo(TodoItem currentItem)
            {
                todos.Remove(currentItem);
            }

        private void DeleteSubItem(TodoItem currentItem, TodoSubItems currentSubItem)
            {
                currentItem.SubItems.Remove(currentSubItem);
            }

        public class TodoItem
            {
                public string Title { get; set; }
                public bool IsDone { get; set; }
                public List<TodoSubItems> SubItems { get; set; }
                public string newTodoDescription { get; set; }
                public DateTime newTodoDueDate { get; set; }
            }

        public class TodoSubItems
            {
                public string SubTitle { get; set; }
                public bool SubIsDone { get; set; }
            }
}

