@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        Username:
        <input @bind="userInput" maxlength="63" disabled="@(!IsConnected)" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" disabled="@(!IsConnected)" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<button @onclick="Typing" disabled="@(!IsConnected)">Typing</button>

<button @onclick="AMessage" disabled="@(!IsConnected)">Anonymous Message</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string>("UserTyping", (user) =>
        {
            var typing = $"{user} is typing";
            messages.Add(typing);
            StateHasChanged();
        });

         hubConnection.On<string>("AMessageReceived", (message) =>
        {
            var Amessage = $" Hacker: {message}";
            messages.Add(Amessage);
            StateHasChanged();
        });


        await hubConnection.StartAsync();
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);

    async Task Typing() =>
        await hubConnection.SendAsync("UserTyping", userInput);

    async Task AMessage() =>
        await hubConnection.SendAsync("AMessage", userInput);



    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}